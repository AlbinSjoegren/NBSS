# Basic and general physics formulas.
import numpy
import libs.vectors as vec

# PS: Reload is ctrl+F5

G_const = 6.67430 / (10 ** 11)  # Gravitational constant
au = 149597870700.0             # Astronomical unit in meters
SM = 1.98847 * (10 ** 30)       # Solar mass in kilograms
SR = 6.95700 * (10 ** 8)        # Solar radius in meters
ly = 9.46073047258 * (10 ** 15) # Light year in meters

secondsInYear = 31557600.0
secondsInADay = 86400.0
secondsInAnHour = 3600.0

# Get the displacement vector generated by an applied force on an object with a mass over a time
def dispVectorFromForceOverTime(v0Vec, FVec, m, timestep):
    return dispVectorFromAccOverTime(v0Vec, FVec / m, timestep)

# Get the displacement vector generated by an applied acceleration over a time
def dispVectorFromAccOverTime(v0Vec, aVec, timestep):
    return v0Vec * timestep + aVec * (timestep * timestep / 2)

def velFromForceOverTime(FVec, m, timestep):
    return velFromAccOverTime(FVec / m, timestep)

# Get the velocity vector generated by an applied acceleration over a time
def velFromAccOverTime(aVec, timestep):
    return aVec * timestep

# Get the magnitude of the gravitional force
def gravForce(r, m1, m2):
    return G_const * (m1 * m2) / (r * r)

# Get the gravitional force between two masses as a vector
def gravForceVector(pos1, pos2, m1, m2):
    r = vec.mag(pos2 - pos1)
    dir = vec.unitVecFast3d(pos2 - pos1, r)
    return dir * gravForce(r, m1, m2)

# Get the specific orbital energy using the velocity of object 1
def specOrbEnergyFromVel(velMag, pos1, pos2, m1, m2):
    distanceToM2 = vec.mag(pos2 - pos1)
    my = G_const * (m1 + m2)
    return velMag * velMag * 0.5 - my / distanceToM2

# Get the specific orbital energy using the semi-major axis of the orbit
def specOrbEnergyFromSMAxis(semimajoraxis, m1, m2):
    my = G_const * (m1 + m2)
    return -my / (2 * semimajoraxis)

# Get specific angular momentum
def specAngMomentVector(posVectorToReducedMass, velocityVector):
    return numpy.cross(posVectorToReducedMass, velocityVector)

# Get eccentricity
def eccentricity(specOrbEnergy, specAngMomentum, m1, m2):
    my = G_const * (m1 + m2)
    return numpy.sqrt(1 + (2 * specOrbEnergy * specAngMomentum * specAngMomentum) / (my * my))

# Get semi-major axis from the orbital radius, speed and masses
def SMAxisFromSpeed(r, speed, m1, m2):
    my = G_const * (m1 + m2)
    return 1/(2 / r - speed * speed / my)

# Get semi-major axis from the specific orbital energy
def SMAxisFromSpecOrbEnergy(specOrbEnergy, m1, m2):
    my = G_const * (m1 + m2)
    return -0.5 * my / specOrbEnergy

def SMinAxisFromSMajAxis(semimajoraxis, eccentricity):
    return semimajoraxis * numpy.sqrt(1 - eccentricity * eccentricity)

# Get apoapsis
def apoapsisFromEccAndSMAxis(eccentricity, semimajoraxis):
    return semimajoraxis * (1 + eccentricity)

# Get periapsis
def periapsisFromEccAndSMAxis(eccentricity, semimajoraxis):
    return semimajoraxis * (1 - eccentricity)

def nuttowoo():
    print("woo")